chcp 1251 - кодировка cmd нормальная psql \! chcp 1251 - внутри psql
pg_ctl start - запуск
psql -d "Test DB" -U postgres ; pass 1234

Test DB=# CREATE TABLE my_contacts (
Test DB(# last_name text, first_name VARCHAR(30) NOT NULL, gender CHAR(1), birthday DATE NOT NULL);
CREATE TABLE

Test DB=# CREATE TABLE list (
Test DB(# name text NOT NULL,
Test DB(# type VARCHAR(6) NOT NULL,
Test DB(# cost DEC(3,2) NOT NULL DEFAULT 1.00); DEC(3,2) - 3 число всех цифр, 2 - после запятой
CREATE TABLE

Test DB=# INSERT INTO list (name, type)
Test DB-# values ('Doughnut', '{с н}');

CREATE TABLE easy_drinks (drink_name text [], main VARCHAR(20), amount DEC(2,1), second text[], amount2 DEC(3,2), directions text[]);
INSERT INTO easy_drinks (drink_name, main, amount, second, amount2, directions) VALUES ('{Терновик}', '{тоник}', 1.5,'{ананасовый сок}', 1, '{взболтать со льдом, разлито по бокалам, украсить лимонной цедрой}');
INSERT INTO easy_drinks VALUES ('{Бабье лето}', 'Яблочный сок', 1.5,'{Горячий чай}', 1, 
'{взболтать со льдом, разлито по бокалам, украсить лимонной цедрой}'); Ебал я исспользовать массивы!!! VARCHAR(n) лучше

SELECT main FROM easy_drinks WHERE drink_name ='{Терновик}';

SELECT * FROM my_contacts
WHERE location LIKE '%CA'; - все значения столбца, кончающиеся на CA (% - любое количество смволов, _ - один символ)
SELECT model, type FROM product WHERE model NOT LIKE '%[^0-9]%' OR model NOT LIKE '%[^a-z]%' - Где либо только цифры, либо только буквы

SELECT drink_name FROM drink_info
WHERE
calories BETWEEN 30 AND 60; 

SELECT d a te _ n a m e
FROM b la c k b o o k
WHERE
rating IN ( ' о р и ги н а л ь н о ' ,
' п о ф р я с а ю щ е ' ,
' В О С Х И Ф И Ф е Л Ь Н О ' ,
* н е п л о х о ' ) ; - вместо тысячи OR (есть еще NOT IN (NOT можно юзать много где))

UPDATE easy_drinks SET amount = 1, main = 'Спрайт' WHERE amount = 1.5;

CREATE TABLE sec_drink (id INT PRIMARY KEY DEFAULT NEXTVAL ('id2'), drink_id INT, // Внешний ключ
CONSTRAINT drink_id_easy_drinks FOREIGN KEY (drink_id) REFERENCES easy_drinks (cock_id));

drinks=# ALTER TABLE easy_drinks ADD COLUMN cock_id INTEGER PRIMARY KEY DEFAULT NEXTVAL ('id1');

SELECT RIGHT ( l o c a t i o n , 2) FROM my__contacts ; - Выборка 2х последних символов

SELECT SUBSTRING IN D E X ( lo c a t io n , ',', 1)  FROM my_contacts; - выборка подстроки до ","

UPDATE my_contacts
SET state = RIGHT(location, 2); 

// Возвращает один столбец с заглавными именем и фамилией где имя содержит : и фамилия :
select concat(initcap(firstname), ' ', initcap(lastname)) as shortlist from elves where firstname like '%tegil%' or lastname like '%astar%';

// CEILING - округление вверх до ближайшего целого (FLOOR - вниз , TRUNC - усекает число до опр кол-ва знаков после запятой)
SELECT id, hours, CEILING(CEILING(hours) * 0.5) - 1 as liters FROM cycling

// CASE - Позволяет задавать условия
SELECT 
  (CASE WHEN n.number % 2 = 0 THEN 'Even' ELSE 'Odd' END) AS is_even
FROM numbers n;

// CAST - преобразование типа в другой, ROUND - Округление до 2 знаков после запятой yr::real - преобразование типа сразу
SELECT name, weight, price, CAST(ROUND(CAST(price*1000/weight AS DEC(10,2)),2) AS FLOAT) AS price_per_kg FROM products ORDER BY price_per_kg, name;

// Запрос внутри запроса
SELECT * FROM Orders WHERE snum = ( SELECT snum FROM Salespeople WHERE sname = 'Motika'); 

// Выбор всех сумм со значением выше средней на 10/04/1990
SELECT * FROM Orders WHERE amt > ( SELECT AVG (amt) FROM Orders WHERE odate = 10/04/1990 );

//Join - это иннер джоин (внутреннее объеденение)
SELECT p.pokemon_name, p.str * m.multiplier AS modifiedStrength, m.element FROM pokemon AS p JOIN multipliers AS m 
ON m.id = p.element_id WHERE (p.str * m.multiplier) >= 40 ORDER BY 2 DESC;

// Объединение запросов (Выведет первый запрос + ниже второй) UNION ALL - выводит все с повторениями из первого запроса
SELECT model, price FROM PC WHERE model IN (SELECT model FROM Product WHERE maker = 'B')
UNION
SELECT model, price FROM Laptop WHERE model IN (SELECT model FROM Product WHERE maker = 'B')

SELECT price FROM (SELECT price as price FROM pc WHERE model IN (SELECT model FROM product WHERE maker='A' AND type='PC')
 UNION ALL
SELECT price FROM Laptop WHERE model IN (SELECT model FROM product WHERE maker='A' AND type='Laptop')) AS prod

// Except - Вывести рез-т первого запроса, без результатов второго (INTERSECT (пересечение)- результат запросов присутствует в обоих запросах)
SELECT ALL FROM Product WHERE type = 'PC'
EXCEPT 
SELECT FROM Product WHERE type = 'Laptop'

SELECT maker FROM Product WHERE model IN (SELECT model FROM PC WHERE speed >= 750)
INTERSECT
SELECT maker FROM Product WHERE model IN (SELECT model FROM Laptop WHERE speed >= 750)

//INNER JOIN - Включает в себя рез-ты из 2-х таблиц удовлетворяющих условиям ON !!!
SELECT DISTINCT p.maker FROM Product AS p JOIN PC ON p.model = PC.model AND PC.speed >= 450

// Вывести принтер с наибольшей ценой
SELECT model, price FROM Printer WHERE price = (SELECT MAX(price) FROM Printer)

// Средняя скорость компов от производителя A
SELECT AVG(speed) FROM PC WHERE model IN (SELECT DISTINCT model FROM Product WHERE maker = 'A' AND type = 'PC')

// HAVING как WHERE но после группировки с помощью GROUP BY (дает список того че надо по одному)
SELECT hd FROM PC GROUP BY hd HAVING COUNT(hd) > 1

SELECT class FROM (SELECT name,class FROM ships  // классы, в которые входит только один корабль из базы данных (учесть также корабли в Outcomes)
union  
SELECT class AS name, class FROM classes, outcomes WHERE classes.class = outcomes.ship) A   
GROUP BY class HAVING COUNT(A.name) = 1

// Сравнение элементов внутри таблицы путем представления ее в виде другой
SELECT DISTINCT P.model, L.model, P.speed, P.ram FROM PC AS P, PC AS L
WHERE P.model > L.model AND P.speed = L.speed AND P.ram = L.ram

// ПОСЛЕ ОБЪЕДИНЕНИЯ ТАБЛИЦ В FROM ОБЯЗАТЕЛЬНО УСЛОВИЕ ТИПА p.model = l.model ИНАЧЕ ПИЗДЕЦ. Выводится ноут со скоростью меньше всех ПК
ALL сравнивает со всеми из вывода (SOME, ANY применяются так же)
SELECT DISTINCT p.type, p.model, l.speed FROM Product p, Laptop l
WHERE p.model = l.model AND l.speed < ALL(SELECT speed FROM PC)

// Применение MIN
SELECT DISTINCT p.maker, pr.price FROM Product p JOIN Printer pr
ON p.model = pr.model AND pr.color = 'y' AND pr.price = (SELECT MIN(price) FROM Printer Where color = 'y')

//Итак, агрегатные функции, включенные в предложение SELECT запроса, не содержащего предложения GROUP BY, 
исполняются над всеми результирующими строками этого запроса.
SELECT p.maker, AVG(l.screen) FROM Product p, Laptop l WHERE p.model = l.model Group BY p.maker;
SELECT p.maker, MAX(PC.price) FROM Product p, PC WHERE p.model = PC.model GROUP BY p.maker
SELECT speed, AVG(price) FROM PC WHERE speed > 600 GROUP BY speed

// HAVING - это как WHERE но для GROUP BY
SELECT DISTINCT maker, COUNT(MODEL) FROM Product WHERE type = 'PC' GROUP BY maker HAVING COUNT(MODEL) > 2

//Получить список сотрудников, получающих макс зп в своем отделе
SELECT * FROM EMPLOYEE a WHERE salary = (SELECT MAX(salary) FROM EMPLOYEE b WHERE a.dep_id = b.dep.id)

// Вывести список отделов, количество сотрудников в которых не превышает 3
SELECT dep_id FROM EMPLOYEE GROUP BY dep_id HAVING count(dep_id) < 4

// Вывести список сотрудников, не имеющих назначенного руководителя, работающего в том-же отделе (мб неправильно, но я думаю что все ок)
SELECT a.* FROM EMPLOYEE a WHERE a.chef_id NOT IN (SELECT id FROM Employee WHERE dep_id = a.dep_id)

// Найти список ID отделов с максимальной суммарной зарплатой сотрудников
SELECT dep_id FROM EMPLOYEE GROUP BY dep_id HAVING SUM(salary) >= ALL(SELECT SUM(salary) FROM EMPLOYEE GROUP BY dep_id)

// Общее табличное выражение (для запроса создается временнная таблица) Выводится модель с самой большой ценой
WITH prices(model, type, price) AS(
  SELECT model, 'PC' type, price FROM PC 
  UNION 
  SELECT model, 'Laptop' type, price FROM Laptop 
  UNION 
  SELECT model, 'Printer' type, price FROM Printer 
)
SELECT model FROM prices WHERE price = ( SELECT MAX(price) FROM prices)

// Вывести для производителей делающих еще и принтеры средних размер ЖД в компе (Вместо третьего AND лучше INTERSECT)
SELECT p.maker, AVG(PC.hd) FROM PC, Product p
WHERE p.model = PC.model AND p.maker IN (SELECT maker FROM Product WHERE type = 'PC' AND p.maker IN (SELECT maker FROM Product WHERE type = 'Printer'))
GROUP BY p.maker

// COUNT по тому, что группируешь нельзя просто так вычислить, нужен подзапрос, Таблицу всегда надо как-то обозвать
SELECT COUNT(maker) FROM (SELECT maker FROM Product GROUP BY maker HAVING COUNT(model) = 1) t1

// EXISTS выбираем такой корабль, что он был поврежден и после этого у него была битва
SELECT DISTINCT o.ship FROM Outcomes o, Battles b WHERE b.name = o.battle AND o.result = 'damaged' AND // Поврежденный и его битва
EXISTS (SELECT ship FROM Outcomes o2 WHERE o2.ship = o.ship AND o2.battle <> o.battle // Есть у этого корабля еще битва
AND EXISTS(SELECT name FROM Battles b2 WHERE (name = o2.battle OR name = o.battle) AND b2.date > b.date)) // Битва была позже


// Не знаю как решить (Нужно выводить NULL вместо price если в price встречается NULL)
SELECT maker, (CASE WHEN price is null THEN NULL ELSE MAX(price) END) as m_price 
FROM (
SELECT p.maker, p.model, PC.price as price FROM Product p, PC WHERE p.model = PC.model
UNION
SELECT p.maker, p.model, l.price as price FROM Product p, Laptop l WHERE p.model = l.model
UNION
SELECT p.maker, p.model, l.price as price FROM Product p, Printer l WHERE p.model = l.model
) t1
GROUP BY maker
---------------------------------
         ^
postgres=# create sequence id1;

postgres=# create table books (bookid  integer primary key default nextval ('id1'),name text, author text [], price integer not null);
CREATE TABLE

postgres=# create table best
postgres-# (bestid integer primary key default nextval ('id2'))
postgres-# inherits (books);
CREATE TABLE
postgres=# select * from best
postgres-# ;
 bookid | name | author | price | bestid
--------+------+--------+-------+--------
(0 ёЄЁюъ)


postgres=# create table rating
postgres-# (ratingid integer default nextval ('id3'), crit1 real, crit2 real, crit3 real, constraint foreign_key foreign key (ratingid) references best (bestid));
CREATE TABLE
postgres=# select * from rating
postgres-# ;
 ratingid | crit1 | crit2 | crit3
----------+-------+-------+-------
(0 ёЄЁюъ)

                     ^
postgres=# insert into books (name, author, price)
postgres-# values ('451degree', '{Ray Bradberry}', 451);
INSERT 0 1
(3 ёЄЁюъш)


postgres=# select * from books;
 bookid |   name    |      author       | price
--------+-----------+-------------------+-------
      1 | 451degree | {"Ray Bradberry"} |   451
      2 | Randbook1 | {"Name Two"}      |   500
      3 | RandBook2 | {"Some Name"}     |  2300
      4 | 451degree | {"Ray Bradberry"} |   451
(4 ёЄЁюъш)


postgres=# select * from best;
 bookid |   name    |      author       | price | bestid
--------+-----------+-------------------+-------+--------
      4 | 451degree | {"Ray Bradberry"} |   451 |      1
(1 ёЄЁюър)


postgres=# insert into rating
postgres-# (crit1, crit2, crit3) values (8.2, 8.6, 9.0);
INSERT 0 1
postgres=# select * rating
postgres-# ;
ОШИБКА:  ошибка синтаксиса (примерное положение: "rating")
СТРОКА 1: select * rating
                   ^
postgres=# select * from rating;
 ratingid | crit1 | crit2 | crit3
----------+-------+-------+-------
        1 |   8.2 |   8.6 |     9
(1 ёЄЁюър)

Lab7

create sequence number1;
CREATE SEQUENCE

Create table A (num integer, row text [], strnum int);
create table b (op_num integer primary key default nextval ('number1'), numfmx int, numsmx int, fname text);
create table c (num integer, res integer []);
CREATE TABLE
insert into a (num, row, strnum) values (1, '{"2","4"}', 1);


create or replace function Counting() returns trigger as $$
declare
     	height1 integer; width1 integer; height2 integer; width2 integer;
	i integer; j integer; a integer; b integer; sum integer[];
begin
     if tg_op = 'UPDATE' then
     	DELETE FROM C WHERE C.num = NEW.op_num;
     end if;
	
	height1 = count (*) from A 
	where num = New.numfmx;
	height2  = count (*) from A 
	where num = New.numsmx;
  
	width1 := array_length(a.row,1) from a where a.num = New.numfmx and strnum = 1;
	width2 := array_length(a.row,1) from a where a.num = New.numsmx and strnum = 1;
	
     IF ((width1 = width2) AND (height1 = height2) AND ((New.fname='add') OR (New.fname='sub'))) then
 	i:=1;
	sum:='{}';
     	while (i<=height1) loop
		j:=1;
		while (j<=width1) loop
			a:= row[j] from a where a.num = New.numfmx and strnum = i;
			b:= row[j] from a where a.num = New.numsmx and strnum = i;
			
			IF New.fname = 'add' then 			
				a:=a+b;
			else	
				a:=a-b;
			end if;			
			sum:=sum||a;   			
			j:=j+1;	
		end loop;
		insert into c values (NEW.op_num, sum);
		sum:='{}';
     		i:=i+1;
     	end loop;
     else
	insert into c values (NEW.num, '{}');     
     end if;    
     return new;
end;
$$ language plpgsql;

create trigger Calcul after insert or update on B for each row execute procedure Counting();

insert into b values (1, 1, 4, 'add');
insert into b values (2, 1, 4, 'sub');

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 8лаба


Нормальный вывод таблицы людей с документами
select people.peopleid, people.name, students.sgroup, teachers.predmet
from people INNER JOIN students on people.peopleid = students.studentid
INNER JOIN teachers on people.peopleid = teachers.teacherid;


Инфа по докам
select * from document inner join typedoc on document.type = typeid;


Люди с их документами
select * from people inner join ( document inner join typedoc on document.type = typedoc.typeid) on peopleid = ownerid;


вывод конкретный человек и его документы 
select docsofman(peopleid);


create sequence sq1;
create sequence sq2;
create sequence sq3;
create sequence sq4;
create sequence sq5;

create table people (peopleid int primary key, name text, gender text);

create table students (sgroup text, studentid int) inherits (people);
create table teachers (predmet text, teacherid int) inherits (people);

create table typedoc(typeid int primary key default nextval ('sq4'), type text));

create table document (docid integer default nextval ('sq3'), ownerid int, type integer, constraint foreign_key
foreign key (ownerid) references people(peopleid), constraint foreign_key1 foreign key (type) 
references typedoc (typeid));

create or replace function stop () returns trigger as $$
begin
return null;
end
$$ language plpgsql;

create trigger osadi_brat_people before insert or update or delete on people for each row execute procedure stop();
create trigger osadi_brat_students before insert or update or delete on students for each row execute procedure stop();
create trigger osadi_brat_teachers before insert or update or delete on teachers for each row execute procedure stop();
create trigger osadi_brat_document before insert or update or delete on document for each row execute procedure stop();
create trigger osadi_brat_typedoc before insert or update or delete on typedoc for each row execute procedure stop();

create or replace function addman(a_name text, a_gender text) returns void as $$
declare
	n integer;
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	n := (select max(peopleid) from people) +1 ;

	insert into people(peopleid, name, gender) values (n, a_name, a_gender);
        insert into students (peopleid, sgroup, studentid) values (0, '-', n);
	insert into teachers (peopleid, predmet, teacherid) values (0, '-', n);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function updman(u_id int, a_name text) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	update people set name = a_name where (peopleid = u_id);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function delman(d_id int) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	delete from people where peopleid = d_id;
	delete from students where studentid = d_id;
	delete from teachers where teacherid = d_id;

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function addstudent(a_name text, a_gender text, a_sgroup text) returns void as $$
declare
	n integer;
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	n := (select max(peopleid) from people) +1 ;

	insert into people (peopleid, name, gender) values (n, a_name, a_gender);
        insert into students (peopleid, sgroup, studentid) values (0, a_sgroup, n);
	insert into teachers (peopleid, predmet, teacherid) values (0, '-', n);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function updstudent(u_id int, u_name text, u_sgroup text) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	update people set name = u_name where (peopleid = id);
	update students set sgroup = u_sgroup where (studentid = u_id);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function delstudent(d_id int) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	delete from people where peopleid = d_id;
	delete from students where studentid = d_id;
	delete from teachers where teacherid = d_id;

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function addteacher(a_name text, a_gender text, a_predmet text) returns void as $$
declare
	n integer;
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	n := (select max(peopleid) from people) +1 ;

	insert into people (peopleid, name, gender) values (n, a_name, a_gender);
        insert into students (peopleid, sgroup, studentid) values (0, '-', n);
	insert into teachers (peopleid, predmet, teacherid) values (0, a_predmet, n);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function updteacher(u_id int, u_name text, u_gender text, u_predmet text) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	update people set name = u_name where (peopleid = u_id);
	update people set gender = u_gender where (peopleid = u_id);
	update teachers set predmet = u_predmet where (teacherid = u_id);

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;

create or replace function delteache(d_id int) returns void as $$
begin
	ALTER TABLE people
	DISABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	DISABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	DISABLE TRIGGER osadi_brat_teachers;

	delete from people where peopleid = d_id;
	delete from students where studentid = d_id;
	delete from teachers where teacherid = d_id;

	ALTER TABLE people
	ENABLE TRIGGER osadi_brat_people;	
	ALTER TABLE students
	ENABLE TRIGGER osadi_brat_students;
	ALTER TABLE teachers
	ENABLE TRIGGER osadi_brat_teachers;
end;
$$ language plpgsql;



create or replace function addtypedoc(a_name text) returns void as $$
begin
	ALTER TABLE typedoc
	DISABLE TRIGGER osadi_brat_typedoc;
	
	insert into typedoc(type) values (a_name);

	ALTER TABLE typedoc
	ENABLE TRIGGER osadi_brat_typedoc;
end;
$$ language plpgsql;

create or replace function updtypedoc(u_id int, u_name text) returns void as $$
begin
	ALTER TABLE typedoc
	DISABLE TRIGGER osadi_brat_typedoc;
	
	update typedoc set type = u_name where (typeid = u_id); 

	ALTER TABLE typedoc
	ENABLE TRIGGER osadi_brat_typedoc;
end;
$$ language plpgsql;

create or replace function deltypedoc(d_id int) returns void as $$
begin
	ALTER TABLE typedoc
	DISABLE TRIGGER osadi_brat_typedoc;
	
	delete from typedoc where typeid = d_id;
	delete from document where type = d_id;

	ALTER TABLE typedoc
	ENABLE TRIGGER osadi_brat_typedoc;
end;
$$ language plpgsql;



create or replace function adddocument(ownid integer, typecode integer) returns void as $$
declare 
	flag integer;
	flag2 integer;
begin
	ALTER TABLE document
	DISABLE TRIGGER osadi_brat_document;	
	
	flag = count (*) from typedoc where typeid = typecode;
	flag2 = count (*) from people where peopleid = ownid;
	if ((flag > 0) and (flag2>0)) then
		insert into document(ownerid, type) values (ownid, typecode);
	end if;

	ALTER TABLE document
	ENABLE TRIGGER osadi_brat_document;
end;
$$ language plpgsql;

create or replace function upddocument(u_id int, ownid integer, typecode integer) returns void as $$
begin
	ALTER TABLE document
	DISABLE TRIGGER osadi_brat_document;	
	
	
	update typedoc set 
		ownerid = ownid,
		type = typecode
		
	where (docid = u_id);

	ALTER TABLE document
	ENABLE TRIGGER osadi_brat_document;
end;
$$ language plpgsql;

create or replace function deldocument(u_id int) returns void as $$
begin
	ALTER TABLE document
	DISABLE TRIGGER osadi_brat_document;	
	
	delete from document where docid = u_id;

	ALTER TABLE document
	ENABLE TRIGGER osadi_brat_document;
end;
$$ language plpgsql;

=====================================================================================================Вывод представления (ужос)=================

create or replace function showpeople() returns table (peopleid integer, name text, sgroup text, predmet text) as $$
declare
 rec RECORD;
begin
	FOR rec IN EXECUTE 'select * from people INNER JOIN students on people.peopleid = students.studentid
	INNER JOIN teachers on people.peopleid = teachers.teacherid'
	LOOP
		peopleid = rec.peopleid;
		name = rec.name;
		sgroup = rec.sgroup;
		predmet = rec.predmet;
		RETURN next;
	END LOOP;
end;
$$ language plpgsql;



create or replace function showdocs() returns table (docid integer, ownerid integer, typeid integer, type text) as $$
declare
 rec RECORD;
begin
	FOR rec IN EXECUTE 'select * from document inner join typedoc on document.type = typedoc.typeid'
	LOOP
		docid = rec.docid;
		ownerid = rec.ownerid;
		typeid = rec.typeid;
		type = rec.type;
		RETURN next;
	END LOOP;
end;
$$ language plpgsql;

===============================================================================Выводы
=таблиц


вывод конкретный человек и его документы 

create or replace function docsofman(myID integer) returns table (peopleid integer, name text,  docid integer, typeid integer, type text)
as $$
declare
 rec RECORD;
begin
	FOR rec IN EXECUTE 'select * from (people inner join ( document inner join typedoc on document.type = typedoc.typeid) on peopleid = ownerid)'
	LOOP
	  if  rec.peopleid = myID then 
 
		peopleid = rec.peopleid;
		name = rec.name;
		docid = rec. docid;
		typeid = rec.typeid;
		type = rec.type;
		RETURN next;

	  end if;
	END LOOP;

end;
$$ language plpgsql;
